{"remainingRequest":"E:\\疫苗取点\\vaccin_plant\\frontend\\node_modules\\babel-loader\\lib\\index.js!E:\\疫苗取点\\vaccin_plant\\frontend\\src\\lib\\utils.js","dependencies":[{"path":"E:\\疫苗取点\\vaccin_plant\\frontend\\src\\lib\\utils.js","mtime":1627871338087},{"path":"E:\\疫苗取点\\vaccin_plant\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\疫苗取点\\vaccin_plant\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.regexp.match\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.date.to-string\";\nimport \"core-js/modules/es6.regexp.constructor\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.array.map\";\nimport \"core-js/modules/es6.array.index-of\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.for-each\";\nimport \"core-js/modules/es6.array.is-array\";\nimport _typeof from \"E:\\\\\\u75AB\\u82D7\\u53D6\\u70B9\\\\vaccin_plant\\\\frontend\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/typeof\";\nimport \"core-js/modules/es6.array.filter\";\n\n/**\r\n * Get the first item that pass the test\r\n * by second argument function\r\n *\r\n * @param {Array} list\r\n * @param {Function} f\r\n * @return {*}\r\n */\nexport function find(list, f) {\n  return list.filter(f)[0];\n}\n/**\r\n * Deep copy the given object considering circular structure.\r\n * This function caches all nested objects and its copies.\r\n * If it detects circular structure, use cached copy to avoid infinite loop.\r\n *\r\n * @param {*} obj ignores 支持忽略指定属性 target支持复制属性到指定对象(尽可能不构建新对象) isRemove 是否移除target中比obj多的属性\r\n * @param {Array<Object>} cache\r\n * @return {*}\r\n */\n\nexport function deepCopy(obj) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$cache = _ref.cache,\n      cache = _ref$cache === void 0 ? [] : _ref$cache,\n      _ref$ignores = _ref.ignores,\n      ignores = _ref$ignores === void 0 ? [] : _ref$ignores,\n      target = _ref.target,\n      _ref$isRemove = _ref.isRemove,\n      isRemove = _ref$isRemove === void 0 ? false : _ref$isRemove;\n\n  // just return if obj is immutable value\n  if (obj === null || _typeof(obj) !== 'object') {\n    return obj;\n  } // if obj is hit, it is in circular structure\n\n\n  var hit = find(cache, function (c) {\n    return c.original === obj;\n  });\n\n  if (hit) {\n    return hit.copy;\n  }\n\n  var isArray = Array.isArray(obj);\n  var copy = target || (isArray ? [] : {});\n\n  if (isArray) {\n    //数组元素结构化复制\n    var arrTarget = copy[0];\n\n    if (arrTarget) {\n      //复制结构对象 保持结构原本的样子\n      arrTarget = deepCopy(arrTarget, {\n        cache: cache,\n        ignores: ignores\n      });\n    }\n\n    for (var i in obj) {\n      if (!copy[i] && arrTarget) {\n        //对应位置没有目标值,复制结构对象\n        copy.splice(i, 1, deepCopy(arrTarget, {\n          cache: cache,\n          ignores: ignores\n        }));\n      }\n\n      if (copy[i]) {\n        deepCopy(obj[i], {\n          cache: cache,\n          ignores: ignores,\n          target: copy[i],\n          isRemove: isRemove\n        });\n      } else {\n        copy.push(deepCopy(obj[i], {\n          cache: cache,\n          ignores: ignores\n        }));\n      }\n    } //数组多余的项都要移除\n\n\n    if (copy.length > obj.length) {\n      copy.splice(obj.length);\n    }\n  } else {\n    //对象自行实现深度复制\n    if (typeof obj.clone === 'function') {\n      copy = obj.clone(); // put the copy into cache at first\n      // because we want to refer it in recursive deepCopy\n\n      cache.push({\n        original: obj,\n        copy: copy\n      });\n    } else {\n      // put the copy into cache at first\n      // because we want to refer it in recursive deepCopy\n      cache.push({\n        original: obj,\n        copy: copy\n      });\n      Object.keys(obj).forEach(function (key) {\n        if (ignores.indexOf(key) < 0) {\n          //忽略属性链路处理\n          var igs = ignores.map(function (ig) {\n            return ig.replace(new RegExp('^' + key + '\\\\.'), '');\n          });\n          copy[key] = deepCopy(obj[key], {\n            cache: cache,\n            ignores: igs,\n            target: copy[key],\n            isRemove: isRemove\n          });\n        }\n      }); //删除不需要的属性\n\n      if (isRemove && _typeof(copy) === 'object') {\n        Object.keys(copy).filter(function (key) {\n          return obj[key] === undefined;\n        }).forEach(function (key) {\n          return delete copy[key];\n        });\n      }\n    }\n  }\n\n  return copy;\n}\n/**\r\n * forEach for object\r\n */\n\nexport function forEachValue(obj, fn) {\n  Object.keys(obj).forEach(function (key) {\n    return fn(obj[key], key);\n  });\n}\nexport function isObject(obj) {\n  return obj !== null && _typeof(obj) === 'object';\n}\nexport function isPromise(val) {\n  return val && typeof val.then === 'function';\n}\nexport function assert(condition, msg) {\n  if (!condition) throw new Error(\"[vuex] \".concat(msg));\n}\nexport function partial(fn, arg) {\n  return function () {\n    return fn(arg);\n  };\n}\n/**\r\n * 去掉字符串前后指定的字符\r\n * @param obj\r\n * @param cache 缓存\r\n * @param ignores 忽略的属性链\r\n * @param stripChars 指定去除的字符集 默认去掉空白字符\r\n */\n\nexport function stripObject(obj) {\n  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref2$cache = _ref2.cache,\n      cache = _ref2$cache === void 0 ? [] : _ref2$cache,\n      _ref2$ignores = _ref2.ignores,\n      ignores = _ref2$ignores === void 0 ? [] : _ref2$ignores,\n      stripChars = _ref2.stripChars;\n\n  if (!stripChars) {\n    stripChars = String.fromCharCode(160) + String.fromCharCode(12288) + String.fromCharCode(32) + String.fromCharCode(0);\n  } // just return if obj is immutable value\n\n\n  if (obj === null || _typeof(obj) !== 'object') {\n    return;\n  } // if obj is hit, it is in circular structure\n\n\n  var hit = find(cache, function (c) {\n    return c.original === obj;\n  });\n\n  if (hit) {\n    //已经去掉前后空格 直接返回,避免重复运算\n    return;\n  }\n\n  cache.push({\n    original: obj\n  });\n\n  var _loop = function _loop(key) {\n    if (ignores.indexOf(key) < 0) {\n      //如果当前key不在忽略列表\n      if (obj[key] && obj[key].toString() === '[object File]') {\n        //文件对象不处理\n        return \"continue\";\n      }\n\n      var type = _typeof(obj[key]);\n\n      switch (type) {\n        case \"string\":\n          var startNum = 0;\n          var endNum = 0; //前空格计数\n\n          for (var i = 0; i < obj[key].length && stripChars.indexOf(obj[key].charAt(i)) >= 0; i++) {\n            startNum++;\n          } //后空格计数\n\n\n          for (var _i = obj[key].length - 1; _i >= 0 && stripChars.indexOf(obj[key].charAt(_i)) >= 0; _i--) {\n            endNum++;\n          }\n\n          obj[key] = obj[key].substring(startNum, obj[key].length - endNum);\n          break;\n\n        case \"object\":\n          //忽略属性链路处理\n          var igs = ignores.map(function (ig) {\n            return ig.replace(new RegExp('^' + key + '\\\\.'), '');\n          });\n          stripObject(obj[key], {\n            cache: cache,\n            ignores: igs\n          });\n          break;\n      }\n    }\n  };\n\n  for (var key in obj) {\n    var _ret = _loop(key);\n\n    if (_ret === \"continue\") continue;\n  }\n}\nexport function browserInfo() {\n  var info = {};\n  var ua = navigator.userAgent.toLowerCase();\n  var re = /(msie|firefox|chrome|opera|version|edge|trident).*?([\\d.]+)/;\n  var m = ua.match(re);\n  info.browser = m[1].replace(/version/, \"'safari\");\n  info.version = m[2];\n  info.number = new Number(m[2].replace(/[^\\d]+/g, ''));\n  return info;\n}",{"version":3,"sources":["E:\\疫苗取点\\vaccin_plant\\frontend\\src\\lib\\utils.js"],"names":["find","list","f","filter","deepCopy","obj","cache","ignores","target","isRemove","hit","c","original","copy","isArray","Array","arrTarget","i","splice","push","length","clone","Object","keys","forEach","key","indexOf","igs","map","ig","replace","RegExp","undefined","forEachValue","fn","isObject","isPromise","val","then","assert","condition","msg","Error","partial","arg","stripObject","stripChars","String","fromCharCode","toString","type","startNum","endNum","charAt","substring","browserInfo","info","ua","navigator","userAgent","toLowerCase","re","m","match","browser","version","number","Number"],"mappings":"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","sourcesContent":["/**\r\n * Get the first item that pass the test\r\n * by second argument function\r\n *\r\n * @param {Array} list\r\n * @param {Function} f\r\n * @return {*}\r\n */\r\nexport function find (list, f) {\r\n  return list.filter(f)[0]\r\n}\r\n\r\n/**\r\n * Deep copy the given object considering circular structure.\r\n * This function caches all nested objects and its copies.\r\n * If it detects circular structure, use cached copy to avoid infinite loop.\r\n *\r\n * @param {*} obj ignores 支持忽略指定属性 target支持复制属性到指定对象(尽可能不构建新对象) isRemove 是否移除target中比obj多的属性\r\n * @param {Array<Object>} cache\r\n * @return {*}\r\n */\r\nexport function deepCopy(obj, {cache = [], ignores = [], target,isRemove = false} = {}) {\r\n    // just return if obj is immutable value\r\n    if (obj === null || typeof obj !== 'object') {\r\n        return obj\r\n    }\r\n\r\n    // if obj is hit, it is in circular structure\r\n    const hit = find(cache, c => c.original === obj)\r\n    if (hit) {\r\n        return hit.copy\r\n    }\r\n\r\n    const isArray = Array.isArray(obj)\r\n    let copy = target || (isArray ? [] : {})\r\n\r\n    if(isArray){\r\n        //数组元素结构化复制\r\n        let arrTarget = copy[0]\r\n        if(arrTarget){\r\n            //复制结构对象 保持结构原本的样子\r\n            arrTarget = deepCopy(arrTarget,{cache, ignores})\r\n        }\r\n        for(let i in obj){\r\n            if(!copy[i] && arrTarget){\r\n                //对应位置没有目标值,复制结构对象\r\n                copy.splice(i, 1, deepCopy(arrTarget,{cache, ignores}))\r\n            }\r\n            if(copy[i]){\r\n                deepCopy(obj[i], {cache: cache,ignores: ignores,target:copy[i],isRemove: isRemove})\r\n            }else{\r\n                copy.push(deepCopy(obj[i], {cache, ignores}))\r\n            }\r\n        }\r\n        //数组多余的项都要移除\r\n        if(copy.length > obj.length){\r\n            copy.splice(obj.length)\r\n        }\r\n    }else{\r\n        //对象自行实现深度复制\r\n        if(typeof obj.clone === 'function'){\r\n            copy = obj.clone()\r\n            // put the copy into cache at first\r\n            // because we want to refer it in recursive deepCopy\r\n            cache.push({\r\n                original: obj,\r\n                copy\r\n            })\r\n        }else{\r\n            // put the copy into cache at first\r\n            // because we want to refer it in recursive deepCopy\r\n            cache.push({\r\n                original: obj,\r\n                copy\r\n            })\r\n\r\n            Object.keys(obj).forEach(key => {\r\n                if (ignores.indexOf(key) < 0) {\r\n                    //忽略属性链路处理\r\n                    let igs = ignores.map(ig => ig.replace(new RegExp('^'+key+'\\\\.'),''))\r\n                    copy[key] = deepCopy(obj[key], {cache: cache, ignores: igs,target:copy[key],isRemove: isRemove})\r\n                }\r\n            })\r\n\r\n            //删除不需要的属性\r\n            if(isRemove && typeof copy === 'object'){\r\n                Object.keys(copy)\r\n                    .filter(key =>obj[key] === undefined)\r\n                    .forEach(key => delete copy[key])\r\n            }\r\n        }\r\n    }\r\n\r\n    return copy\r\n}\r\n\r\n/**\r\n * forEach for object\r\n */\r\nexport function forEachValue (obj, fn) {\r\n  Object.keys(obj).forEach(key => fn(obj[key], key))\r\n}\r\n\r\nexport function isObject (obj) {\r\n  return obj !== null && typeof obj === 'object'\r\n}\r\n\r\nexport function isPromise (val) {\r\n  return val && typeof val.then === 'function'\r\n}\r\n\r\nexport function assert (condition, msg) {\r\n  if (!condition) throw new Error(`[vuex] ${msg}`)\r\n}\r\n\r\nexport function partial (fn, arg) {\r\n  return function () {\r\n    return fn(arg)\r\n  }\r\n}\r\n\r\n/**\r\n * 去掉字符串前后指定的字符\r\n * @param obj\r\n * @param cache 缓存\r\n * @param ignores 忽略的属性链\r\n * @param stripChars 指定去除的字符集 默认去掉空白字符\r\n */\r\nexport function stripObject(obj, {cache = [], ignores = [],stripChars} = {}) {\r\n    if(!stripChars){\r\n        stripChars = String.fromCharCode(160)+String.fromCharCode(12288)+String.fromCharCode(32)\r\n            +String.fromCharCode(0)\r\n    }\r\n    // just return if obj is immutable value\r\n    if (obj === null || typeof obj !== 'object') {\r\n        return\r\n    }\r\n\r\n    // if obj is hit, it is in circular structure\r\n    const hit = find(cache, c => c.original === obj)\r\n    if (hit) {\r\n        //已经去掉前后空格 直接返回,避免重复运算\r\n        return\r\n    }\r\n\r\n    cache.push({\r\n        original: obj\r\n    })\r\n\r\n    for(let key in obj){\r\n        if (ignores.indexOf(key) < 0) {\r\n            //如果当前key不在忽略列表\r\n            if(obj[key] && obj[key].toString() === '[object File]'){\r\n                //文件对象不处理\r\n                continue;\r\n            }\r\n            const type  = typeof obj[key]\r\n            switch(type){\r\n                case \"string\":\r\n                    let startNum = 0;\r\n                    let endNum = 0;\r\n                    //前空格计数\r\n                    for (let i=0;i<obj[key].length && stripChars.indexOf(obj[key].charAt(i))>=0;i++) startNum++\r\n                    //后空格计数\r\n                    for (let i=obj[key].length-1;i>=0 && stripChars.indexOf(obj[key].charAt(i))>=0;i--) endNum++\r\n                    obj[key] = obj[key].substring(startNum,obj[key].length - endNum)\r\n                    break;\r\n                case \"object\":\r\n                    //忽略属性链路处理\r\n                    let igs = ignores.map(ig => ig.replace(new RegExp('^'+key+'\\\\.'),''))\r\n                    stripObject(obj[key],{cache,ignores:igs})\r\n                    break;\r\n            }\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport function browserInfo() {\r\n    let info = {};\r\n    let ua = navigator.userAgent.toLowerCase();\r\n    let re = /(msie|firefox|chrome|opera|version|edge|trident).*?([\\d.]+)/;\r\n    let m = ua.match(re);\r\n    info.browser = m[1].replace(/version/, \"'safari\");\r\n    info.version = m[2];\r\n    info.number = new Number(m[2].replace(/[^\\d]+/g,''));\r\n    return info;\r\n}\r\n"]}]}